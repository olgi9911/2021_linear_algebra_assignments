# -*- coding: utf-8 -*-
"""「Linear Algebra - hw2」的副本

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15M_5AtTcHgvUG_aFyGnSP1l9SQD24NmU
"""

# install imagemagick in order to save gif file.
!apt install imagemagick

# Mount your google drive to save your gif result.
from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# draw result on colab.
# %matplotlib inline

import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d.axes3d import Axes3D
import numpy as np
import math
from matplotlib.animation import FuncAnimation, PillowWriter 

def set_object(R, T):
    # drawing
    for oo, mat in zip(objs, data):
        n = len(mat[0])
        # rotation 
        mat = np.dot(R, mat) + np.dot(T, np.ones((1,n)))
        # set the object    
        oo.set_data(mat[0], mat[1])
        oo.set_3d_properties(mat[2])
    return objs

def roll(i):
    phi = 2*i*math.pi/N
    # define the rotation matrix
    R = np.array([[1,             0,             0],
                  [0, math.cos(phi), -math.sin(phi)], 
                  [0, math.sin(phi), math.cos(phi)]]);
    
    #m = len(data)
    m = 3
    T = np.zeros((m,1))     # no translation
    return set_object(R, T)

def yaw(i):
    phi = 2*i*math.pi/N
    # define the rotation matrix
    R = np.array([[math.cos(phi), -math.sin(phi), 0], 
                  [math.sin(phi),  math.cos(phi), 0], 
                  [0,              0,             1]]);
    
    m = len(data)
    T = np.zeros((m,1))     # no translation
    return set_object(R, T)

def pitch(i):
    phi = 2*i*math.pi/N
    # define the rotation matrix
    R = np.array([[ math.cos(phi), 0, -math.sin(phi)], 
                  [0,              1,             0],
                  [math.sin(phi), 0, math.cos(phi)]]);
    
    m = len(data)
    T = np.zeros((m,1))     # no translation
    ax.text(10, 10, 10, str(phi))
    return set_object(R, T)

# -------------- Q2 ----------------#
def myMovie_xyz_in_out(i):
    #T = np.array([[xdata[i]], [ydata[i]], [xdata[i]]])
    if i < 10:
      T = np.array([[x_intro[i]], [15], [zdata[0]]])
      R = np.eye(3)
    elif i > 109:
      i = i - 110
      T = np.array([[x_outro[i]], [r[99]*ydata[99]], [-10]])
      R = np.eye(3)
    else:
      i = i - 10
      T = np.array([[r[i]*xdata[i]], [r[i]*ydata[i]], [zdata[i]]])
      # yaw
      # slip a circle into N equal angles
      phi = 2*-2*math.pi*i/N
      R = np.array([[ math.cos(phi), -math.sin(phi), 0], 
                    [math.sin(phi), math.cos(phi), 0], 
                    [0,              0,             1]])
      # add pitch
      theta = 2*2*math.pi*xdata[int(i+N/4)%N]/r_org/12
      R = np.dot(R, np.array([[ math.cos(theta), 0, -math.sin(theta)], 
                              [0,              1,             0],
                              [math.sin(theta), 0, math.cos(theta)]]))
      # add roll
      R = np.dot(R, np.array([[1,              0,             0],
                              [0, math.cos(-phi), -math.sin(-phi)], 
                              [0, math.sin(-phi),  math.cos(-phi)]]))
    
    return set_object(R, T)
# -------------- Q3 ----------------#
def myMovie_xyz(i):
    T = np.array([[r[i]*xdata[i]], [r[i]*ydata[i]], [zdata[i]]])
    # yaw
    # slip a circle into N equal angles
    phi = 2*-2*math.pi*i/N
    R = np.array([[ math.cos(phi), -math.sin(phi), 0], 
                  [math.sin(phi), math.cos(phi), 0], 
                  [0,              0,             1]])
    # add pitch
    theta = 2*2*math.pi*xdata[int(i+N/4)%N]/r_org/12
    R = np.dot(R, np.array([[ math.cos(theta), 0, -math.sin(theta)], 
                            [0,              1,             0],
                            [math.sin(theta), 0, math.cos(theta)]]))
    # add roll
    R = np.dot(R, np.array([[1,              0,             0],
                            [0, math.cos(-phi), -math.sin(-phi)], 
                            [0, math.sin(-phi),  math.cos(-phi)]]))
    
    return set_object(R, T)

def myMovie_zyx(i):
    T = np.array([[r[i]*xdata[i]], [r[i]*ydata[i]], [zdata[i]]])
    
    # slip a circle into N equal angles
    phi = 2*-2*math.pi*i/N
    # add roll
    R = np.array([[1,              0,             0],
                            [0, math.cos(-phi), -math.sin(-phi)], 
                            [0, math.sin(-phi),  math.cos(-phi)]])
    # add pitch
    theta = 2*2*math.pi*xdata[int(i+N/4)%N]/r_org/12
    R = np.dot(R, np.array([[ math.cos(theta), 0, -math.sin(theta)], 
                            [0,              1,             0],
                            [math.sin(theta), 0, math.cos(theta)]]))
    # yaw
    R = np.dot(R, np.array([[ math.cos(phi), -math.sin(phi), 0], 
                  [math.sin(phi), math.cos(phi), 0], 
                  [0,              0,             1]]))

    
    return set_object(R, T)
# -------------- Q5 ----------------#
def gimbal_lock(i):
    m = 3
    T = np.zeros((m,1))     # no translation

    # yaw
    # slip a circle into N equal angles
    phi = 2*-2*math.pi*i/N
    R = np.array([[ math.cos(phi), -math.sin(phi), 0], 
                  [math.sin(phi), math.cos(phi), 0], 
                  [0,              0,             1]])
    # add pitch
    theta = 2*2*math.pi*xdata[int(i+N/4)%N]/r_org/12
    R = np.dot(R, np.array([[ math.cos(math.pi/2), 0, -math.sin(math.pi/2)], 
                            [0,              1,             0],
                            [math.sin(math.pi/2), 0, math.cos(math.pi/2)]]))
    # add roll
    R = np.dot(R, np.array([[1,              0,             0],
                            [0, math.cos(phi), -math.sin(phi)], 
                            [0, math.sin(phi),  math.cos(phi)]]))
    
    return set_object(R, T)

# -------------- main program starts here ----------------#
N = 100
fig = plt.gcf()
ax = Axes3D(fig, xlim=(-15, 15), ylim=(-15, 15), zlim=(-15, 15))

# -------------- Q1 ----------------#
# data matrix
M1 = np.array([[-2, -2, 2, -2], 
                [-.5, -2.5, 0, -.5],
                [0, 0, 0, 0]])
M2 = np.array([[-2, -2, 2, -2], 
                [.5, 2.5, 0, .5],
                [0, 0, 0, 0]])
M3 = np.array([[-2, 2, -2, -2], 
                [-.5, 0, 0, -.5],
                [0, 0, -1, 0]])
M4 = np.array([[-2, 2, -2, -2], 
                [.5, 0, 0, .5],
                [0, 0, -1, 0]])
data = [M1, M2, M3, M4]

# create 3D objects list
O1, = ax.plot3D(M1[0], M1[1], M1[2])
O2, = ax.plot3D(M2[0], M2[1], M2[2])
O3, = ax.plot3D(M3[0], M3[1], M3[2])
O4, = ax.plot3D(M4[0], M4[1], M4[2])
objs = [O1, O2, O3, O4]

# trajectory data
t = np.arange(0,1,0.01)
x_intro = np.arange(-15, 0, 1.5)
x_outro = np.arange(0, 15, 1.5)
#r = 15
r_org = 10
r = np.arange(15,5,-0.1)
#xdata = r*np.sin(2*math.pi*t)
#ydata = r*np.cos(2*math.pi*t)
xdata = np.sin(2*math.pi*t*2)
ydata = np.cos(2*math.pi*t*2)
zdata = np.arange(10,-10,-0.2)

# basic rotations
#ani = FuncAnimation(fig, roll, frames=N, interval=10)
#ani = FuncAnimation(fig, yaw, frames=N, interval=10)
#ani = FuncAnimation(fig, pitch, frames=N, interval=1000)
#ani = FuncAnimation(fig, myMovie, frames=len(xdata), interval=100)
#ani = FuncAnimation(fig, myMovie_xyz_in_out, frames=N+20, interval=100)
#ani = FuncAnimation(fig, myMovie_zyx, frames=len(xdata), interval=100)
ani = FuncAnimation(fig, gimbal_lock, frames=len(xdata), interval=100)

#ani.save('/content/drive/My Drive/your_file_name', writer='imagemagick', fps=30)
#ani.save('/content/drive/My Drive/A2.gif', writer='imagemagick', fps=30)
#ani.save('/content/drive/My Drive/zyx.gif', writer='imagemagick', fps=30)
#ani.save('/content/drive/My Drive/xyz_in_out.gif', writer='imagemagick', fps=30)
ani.save('/content/drive/My Drive/gimbal.gif', writer='imagemagick', fps=30)

# ---------------- for google colab user ----------------#
# If you didn't use colab, you can delete below 2 lines of code.
from IPython.display import HTML
HTML(ani.to_html5_video())
# ---------------- for google colab user ----------------#